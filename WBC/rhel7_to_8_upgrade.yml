- name: rhel7to8upgrade
  hosts: servers1
  become: yes
  gather_facts: yes
  vars: 
    buildjson: '/var/build/build.json'
    app_ids: ## Provide in a format hostname: app_id example: 
      dlu201016145426: A00B05

  tasks:
  - name: Skip and Fail if the server is below rhel 7.6 or already on rhel8
    fail:
      msg: "Cannot upgrade: Current version is : rhel {{ ansible_distribution_version }}"
    when: ansible_distribution_version|float < 7.6 or ansible_distribution_version|float >= 8.0

  - name: Confirm the snapshot image taken
    pause:
      prompt: "Please proceed only after you taken the snapshot image of the server(s)..\n
      Use vm_take_snapshot.yml playbook to take snapshot if required.."

## Set downtime for the servers going to upgrade
  - name: Get current time
    raw: date +'%Y-%m-%d %H:%M'
    register: dt
    delegate_to: localhost
    run_once: yes
    become: no

  - name: Set current time
    set_fact:
      start_time: "{{ dt.stdout|trim }}"

  - name: Get end hour
    set_fact:
      fututre_hr: "{{ dt.stdout.split()[1].split(':')[0]|int + 5 }}"

  - set_fact: 
      end_time: "{{ dt.stdout.split()[0] }} {{ fututre_hr }}:00"
  
  - debug:
      msg: "{{ start_time }} {{ end_time }}"

  - name: Set Downtime from au2106lpi6004
    shell: '/usr/local/script/.set_downtime.sh {{ inventory_hostname }} "{{ start_time }}" "{{ end_time }}" 1 0 {{ ansible_user }} "rhel7to8 upgrade"'
    register: set_downtime
    become_user: centreon
    delegate_to: au2106lpi6004

  - name: Show the downtime status
    debug:
      var: set_downtime.stdout

  - name: Fail if setting downtime failed
    fail:
      msg: "Setting Downtime failed"
    when: set_downtime is failed

## Umount and disable NFS in fstab as its a blocker for upgrade
  - name: Check if NFS exists
    raw: grep nfs /etc/fstab
    register: nfs_mount
    failed_when: no
    
  - name: Umount and disable NFS in fstab
    block: 
      - name: Show NFS if its exists
        debug:
          var: nfs_mount.stdout_lines
        when: nfs_mount.rc == 0

      - name: Check /etc/fstab_rhel7to8_take_orig_bkp exists
        stat:
          path: /etc/fstab_rhel7to8_take_orig_bkp
        register: fstab_bkp

      - name: Take backup if nfs exists
        copy: 
          src: /etc/fstab
          dest: /etc/fstab_rhel7to8_take_orig_bkp
          remote_src: yes
        when: not fstab_bkp.stat.exists

      - name: Unmount NFS
        raw: umount {{item.split()[1]}}
        loop: "{{ nfs_mount.stdout_lines }}"
        ignore_errors: yes

      - name: Comment out NFS
        replace:
          path: /etc/fstab
          regexp: '{{ item }}'
          replace: "#{{ item }}"
        loop: "{{ nfs_mount.stdout_lines }}"

    when: nfs_mount.rc == 0

  - name: Set app_id
    set_fact: 
      APPID: "{{ item.value }}"
    when: inventory_hostname == item.key
    loop: "{{ app_ids|dict2items }}"

  - name: show app_id
    debug:
      msg: "app_id is {{ APPID }}"

  - name: Make sure jq installed
    yum:
      name: jq
      state: installed

  - name: Set app_id in build.json
    raw: |
      /usr/local/sbin/update_json.sh -f {{ buildjson }} --value ".app_id={{APPID}}" --set
      /usr/local/sbin/update_json.sh -f {{ buildjson }} --value '.migration."7to8"=true' --set

  - name: Stop chef-client service
    service:
      name: chef-client
      state: stopped

  - name: Enable the rhel-7-server-extras-rpms Repo
    rhsm_repository: 
      name: rhel-7-server-extras-rpms
      state: enabled

  - name: Install leapp and leapp-repository
    yum:
      name: 
        - leapp
        - leapp-repository
      state: installed

  - name: get_url | download leapp-data14.tar.gz
    get_url:
      url: 'https://artifactory.srv.westpac.com.au/artifactory/A00841_RHCP/in_place_upgrades/el7_2_el8/leapp-data14.tar.gz'
      dest: /etc/leapp/files/leapp-data14.tar.gz

  - name: Unarchive leapp-data14.tar.gz
    unarchive:
      src: /etc/leapp/files/leapp-data14.tar.gz
      dest: /etc/leapp/files/
      remote_src: yes
    register: unarchive_r

  - name: Remove /etc/leapp/files/leapp-data14.tar.gz
    file:
      path: /etc/leapp/files/leapp-data14.tar.gz
      state: absent
    when: unarchive_r is success

  - name: Remove btrfs
    modprobe:
      name: "{{ item }}"
      state: absent
    loop: 
      - pata_acpi
      - btrfs

  - name: Add btrfs to blacklist.conf
    lineinfile:
      line: "{{ item }}"
      path: /etc/modprobe.d/local-blacklist.conf
      create: yes
    loop: 
      - blacklist btrfs
      - install btrfs /bin/false
      - blacklist pata_acpi
      - install pata_acpi /bin/false
  
  - name: pam_tally2 workaround | remove pam_tally2 from /etc/pam.d/*
    raw: sed -i '/pam_tally2/d' /etc/pam.d/*  ## sed is idempotent

  - name: Remove hosts.allow and hosts.deny files
    file:
      path: "{{ item }}"
      state: absent
    loop:
      - /etc/hosts.deny
      - /etc/hosts.allow

  - name: Remove the unnecessary packages for rhel8 - ganglia, chef, nrpe katello, gofer etc
    yum:
      name: 
        - BESAgent 
        - chef 
        - ganglia 
        - ganglia-gmond 
        - gpg-pubkey 
        - jq 
        - libconfuse 
        - managesoft 
        - nagios-common 
        - nagios-plugins 
        - nagios-plugins-disk 
        - nagios-plugins-load 
        - nagios-plugins-ntp 
        - nagios-plugins-perl 
        - nagios-plugins-procs 
        - nagios-plugins-ps 
        - nagios-plugins-swap 
        - nagios-plugins-uptime 
        - nmon 
        - nrpe 
        - oniguruma 
        - xagt
        - gofer 
        - katello-agent 
        - katello-host-tools-fact-plugin 
        - qpid-proton-c 
        - python-gofer 
        - katello-host-tools 
        - python-gofer-proton 
        - python-qpid-proton
      state: absent
    
  - name: Yum clean 
    shell: yum clean all ##can't use yum module to yum clean so using shell
    args:
      warn: no

  - name: Create leapp_upgrade_repositories.repo
    copy:
      dest: /etc/leapp/files/leapp_upgrade_repositories.repo
      content: |
        [rhel_8_dvd_baseos]
        name=rhel 8 dvd baseos
        baseurl=https://artifactory.srv.westpac.com.au/artifactory/A00841_RHCP/kickstart/rhel8.2/BaseOS/
        enabled=1
        gpgcheck=0
        sslverify = no
        
        [rhel_8_dvd_appstream]
        name=rhel dvd appstream
        baseurl=https://artifactory.srv.westpac.com.au/artifactory/A00841_RHCP/kickstart/rhel8.2/AppStream/
        enabled=1
        gpgcheck=0
        sslverify = no
        
        [A00841_RPM_RHEL8]
        name=rhel codeready files
        baseurl=https://artifactory.srv.westpac.com.au/artifactory/A00841_RPM_RHEL8/
        enabled=1
        gpgcheck=0
        sslverify = no

## Confirm in answer file
  - name: Confirm in Answer file /var/log/leapp/answerfile
    blockinfile: 
      path: /var/log/leapp/answerfile
      block: |
        [remove_pam_pkcs11_module_check]
        confirm = True
      create: yes

  - name: Run Pre-upgrade
    shell: leapp preupgrade --enablerepo rhel_8_dvd_baseos --enablerepo rhel_8_dvd_appstream --enablerepo A00841_RPM_RHEL8 --no-rhsm
    register: preupgrade
    ignore_errors: yes

  - debug:
      var: preupgrade.stdout 

  - pause:
      prompt: "Please validate the preupgrade report before continue to upgrade ..\n
      /var/log/leapp/leapp-preupgrade.log\n
      /var/log/leapp/leapp-report.json\n
      /var/log/leapp/leapp-report.txt"
  
  - name: Run Upgrade
    shell: leapp upgrade --enablerepo rhel_8_dvd_baseos --enablerepo rhel_8_dvd_appstream --enablerepo A00841_RPM_RHEL8 --no-rhsm
    register: upgrade
    when: (preupgrade.rc is defined and preupgrade is success) or (preupgrade_2 is defined and preupgrade_2 is success)

  - debug:
      var: upgrade.stdout

  - debug:
      msg: "Upgrade script ran successfully. Proceed with reboot.."
    when: 
      - upgrade is success
      - "'A reboot is required to continue' in upgrade.stdout"

  - name: Pause to confirm reboot
    pause:
      prompt: "Enter to continue with reboot.."

  - name: Reboot after the upgrade
    reboot:
      msg: "Reboot Initiated part of rhel7 to 8 upgrade"
      reboot_timeout: 1800
      post_reboot_delay: 30

  - name: 1 | After reboot | Create /usr/bin/python soft link in rhel8 for seemless ansible operation
    raw: ln -s /usr/bin/python3 /usr/bin/python
    ignore_errors: yes

  - name: Get new facts after upgrade
    setup:

  - name: Show distribution and version after upgrade
    debug:
      msg: "{{ ansible_distribution }} {{ ansible_distribution_version }}"

  - name: Pause to verify the upgraded OS version
    pause:
      prompt: "See the OS version and continue all good.."

  - name: List | unnecessary log files
    find:
      paths: [/var/log]
      patterns: [grubby_prune_debug*, tuned.log*, rhsm.log*, rhsmcertd.log*, dnf.log*]
      recurse: yes
    register: log_files

  - name: Remove | unnecessary log files
    file:
      path: "{{ item.path }}"
      state: absent
    loop: "{{ log_files.files }}"

  - name: Install oniguruma, jq and chef-client from artifactory
    yum:
      name: 
        - https://artifactory.srv.westpac.com.au/artifactory/A00841_RHCP/one_soe/software/jq/oniguruma-6.8.2-1.el8.x86_64.rpm 
        - https://artifactory.srv.westpac.com.au/artifactory/A00841_RHCP/one_soe/software/jq/jq-1.5-12.el8.x86_64.rpm   
        - https://artifactory.srv.westpac.com.au/artifactory/A00841_RHCP/one_soe/software/chef_client/chef-15.8.23-1.el7.x86_64.rpm
      state: present

  - name: Take backup of build.json
    copy: 
      src: '{{ buildjson }}'
      dest: '{{ buildjson }}_rhel7to8_upgrade'
      backup: true
      remote_src: true

  - name: Get Site name
    shell: jq .Site {{buildjson}} -r
    register: site

  - name: Show Site
    debug:
      var: site.stdout

  - name: Fail if site is not WSDC or RCC.
    fail:
      msg: "Site is not WSDC or RCC"
    when: site.stdout|lower != 'rcc' and site.stdout|lower != 'wsdc'

  - name: Update policy_name in build.json
    shell: /usr/local/sbin/update_json.sh -f {{ buildjson }} --value '.policy_name="a00841_rhel_obm_{{ site.stdout|lower }}-isd"' --set
    when: site.stdout|lower == 'rcc' or site.stdout|lower == 'wsdc'

  - name: Unregister from Satellite
    redhat_subscription:
      state: absent

  - name: Yum remove katello-ca-consumer cert
    yum:
      name: katello-ca-consumer-capsule*
      state: absent

  - name: Run Satellite build cookbook
    shell: chef-client -j {{buildjson}} -n wbc_rhel_satellite_build
    register: satellite_cookbook

  - name: Install NetworkManager
    yum:
      name: NetworkManager
      state: installed

  - name: Start NetworkManager
    service:
      name: NetworkManager
      state: started

  - name: Do full patching
    yum: 
      name: "*"
      state: latest

  - name: Reboot after the patching
    reboot:
      msg: "Reboot Initiated part of rhel7 to 8 upgrade"
      reboot_timeout: 1800
      post_reboot_delay: 30

  - name: 2 | After reboot | Create /usr/bin/python soft link in rhel8 for seemless ansible operation
    raw: ln -s /usr/bin/python3 /usr/bin/python
    ignore_errors: yes

  - name: Set wbc.rhel.hostkeys.hostkeys.disable=true in build.json
    shell: /usr/local/sbin/update_json.sh -f {{buildjson}} --value '.wbc.rhel.hostkeys.hostkeys.disable=true'  --set

  - name: Run build cookbook
    shell: chef-client -n build -j {{buildjson}}

  - name: Run maintain cookbook
    shell: chef-client -n maintain -j {{buildjson}}

  - name: Run comply cookbook
    shell: chef-client -n comply -j {{buildjson}}

  - name: Collect | any leftover rhel7 packages | xagt and chef exempted
    shell: rpm -qa|grep el7
    register: el7_rpms
    args:
      warn: no

  - name: Show | any leftover rhel7 packages | xagt and chef exempted
    debug:
      var: el7_rpms.stdout_lines

  - name: Remove any leftover rhel7 packages | xagt and chef exempted
    yum:
      name: "{{ item }}"
      state: absent
    loop: "{{ el7_rpms.stdout_lines }}"
    when: 
      - "'chef' not in item"
      - "'xagt' not in item"

##Enable nfs and mount it
  - name: Check /etc/fstab_rhel7to8_take_orig_bkp exists
    stat:
      path: /etc/fstab_rhel7to8_take_orig_bkp
    register: fstab_bkp

  - name: Enable and mount NFS
    block:
      - name: Restore fstab backup
        copy: 
          src: /etc/fstab_rhel7to8_take_orig_bkp
          dest: /etc/fstab
          remote_src: yes
      
      - name: Mount NFS
        raw: mount  -a
        args:
          warn: no

      - name: Get the mounted NFS
        raw: mount|grep -i nfs
        register: nfs_mounted

      - name: Show mounted NFS
        debug:
          var: nfs_mounted.stdout_lines
          
    when: fstab_bkp.stat.exists

## Update /etc/motd
  - name: Update motd
    command: /etc/cron.daily/motd

  - name: unlink /usr/bin/python which was used for backward compatibility with Ansible
    file:
      path: /usr/bin/python
      state: absent

  - name: Final Reboot
    reboot:
      msg: "Reboot Initiated part of rhel7 to 8 upgrade"
      reboot_timeout: 1800
      post_reboot_delay: 30